jobs:
  build-images:
    needs: detect-changed-images
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
      - id: checkout-repository-code
        name: Checkout repository code
        uses: actions/checkout@v5

      - id: log-in-to-github-container-registry
        name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.actor }}

      - id: read-version-file
        name: Read version file
        run: |
          echo "version=$(cat images/${{ matrix.image }}/.version)" >> $GITHUB_OUTPUT

      - id: build-and-push-image
        name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ./images/${{ matrix.image }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:v${{ steps.read-version-file.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:latest
    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJSON(needs.detect-changed-images.outputs.matrix) }}

  detect-changed-images:
    outputs:
      matrix: ${{ steps.construct-changed-docker-images-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - id: checkout-repository-code
        name: Checkout repository code
        uses: actions/checkout@v5

      - id: get-changed-files
        name: Get changed files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            images/**

      - id: construct-changed-docker-images-matrix
        name: Construct changed Docker images matrix
        run: |
          IMAGES=()
          for FILE in ${{ steps.get-changed-files.outputs.all_changed_files }}; do
            IMAGE="$(echo $FILE | cut -d/ -f2)"
            if [[ ! " ${IMAGES[*]} " =~ " ${IMAGE} " ]]; then
              IMAGES+=("$IMAGE")
            fi
          done
          matrix=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${IMAGES[@]}")
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

name: Build new Docker images

on:
  push:
    branches:
      - main
    paths:
      - "images/**"
