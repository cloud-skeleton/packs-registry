#!/usr/bin/env python3

from warnings import filterwarnings
from urllib3.exceptions import InsecureRequestWarning
filterwarnings("ignore", category = InsecureRequestWarning)

from nomad import Nomad
from nomad.api.exceptions import URLNotFoundNomadException
from os import getenv
from queue import Queue
from requests_unixsocket import Session
from threading import Thread, Event
from urllib.parse import quote
from typing import cast, Any

if not (secrets_dir := getenv("NOMAD_SECRETS_DIR", "")):
    raise ValueError("NOMAD_SECRETS_DIR environment variable is not set.")
if not (namespace := getenv("NOMAD_NAMESPACE", "")):
    raise ValueError("NOMAD_NAMESPACE environment variable is not set.")

NOMAD_SOCKET: str = f"{secrets_dir}/api.sock"
LAST_EVENT_VAR_PATH: str = "system/tools/nomad-job-watchdog/last_event"
PARAMS_VAR_BASE_PATH: str = getenv("PARAMS_VAR_BASE_PATH", "params")

nomad: Nomad = Nomad(
    address = "http+unix://" + quote(NOMAD_SOCKET, safe = ""),
    session = Session()
)

def _get_var(path: str) -> tuple[int, dict[str, str]]:
    var: dict[str, Any] = nomad.variable.get_variable(path, namespace)
    return var["ModifyIndex"], var["Items"]

def _is_var(path: str) -> bool:
    try:
        _get_var(path)
        return True
    except URLNotFoundNomadException:
        return False

def _set_var(path: str, data: dict[str, str], index: int | None = None) -> tuple[int, dict[str, str]]:
    var: dict[str, Any] = nomad.variable.create_variable(path, {"Items": data}, namespace, index)
    return var["ModifyIndex"], var["Items"]

def _attach_acl(data: dict[str, Any]) -> None:
    rules: str = f"""\
    namespace "{data["namespace"]}" {{
        policy = "read"

        variables {{
            path "{PARAMS_VAR_BASE_PATH}/{data['job']}/*" {{
                "capabilities" = [
                    "list",
                    "read"
                ]
            }}
        }}
    }}
    """
    policy: dict[str, Any] = {
        "Name": f"allow-variables-read-{data['job']}".replace("_", "-"),
        "Description": f"AutoACL: Allow read variables for {data['job']} job",
        "JobACL": {
            "Namespace": data["namespace"],
            "JobID": data['job']
        },
        "Rules": rules
    }
    print(f"Creating ACL policy for {data['job']} job")
    nomad.acl.create_policy(f"allow-variables-read-{data['job']}".replace("_", "-"), policy)

def _remove_acl(data: dict[str, Any]) -> None:
    print(f"Deleting ACL policy for {data['job']} job")
    nomad.acl.delete_policy(f"allow-variables-read-{data['job']}".replace("_", "-"))

def _create_parameters(data: dict[str, Any]) -> None:
    param_vars: dict[str, dict[str, str]] = {}
    for param_key, param_value in data["parameters"].items():
        variable_subpath, variable_key = param_key.split(".", 1)
        variable_path: str = f"{PARAMS_VAR_BASE_PATH}/{data['job']}/{variable_subpath}"
        param_vars.setdefault(variable_path, {})[variable_key] = param_value
    for path, value in param_vars.items():
        if _is_var(path):
            continue
        _set_var(path, value)

def _process_event(event: dict[str, Any]) -> None:
    last_event_var_index: int = 0
    last_event_value: int = 0
    if _is_var(LAST_EVENT_VAR_PATH):
        last_event_var_index, last_event_var_value = _get_var(LAST_EVENT_VAR_PATH)
        last_event_value = int(last_event_var_value["LAST_EVENT"])
    if event["Index"] <= last_event_value:
        return
    job: dict[str, Any] = event["Events"][0]["Payload"]["Job"]
    data: dict[str, Any] = {
        "namespace": job["Namespace"],
        "job": job["Name"],
        "parameters": {
            meta_key.removeprefix("params."): meta_value
            for meta_key, meta_value in job["Meta"].items()
            if meta_key.startswith("params.")
        }
    }
    if event["Events"][0]["Type"] == "JobRegistered":
        _attach_acl(data)
        _create_parameters(data)
    elif event["Events"][0]["Type"] == "JobDeregistered":
        _remove_acl(data)
    _set_var(
        LAST_EVENT_VAR_PATH,
        {"LAST_EVENT": str(event["Index"])},
        last_event_var_index
    )

def start() -> None:
    stream, _, events = cast(
        tuple[Thread, Event, Queue],
        nomad.event.stream.get_stream(
            namespace = "*",
            topic = {"Job": "*"}
        )
    )
    stream.start()
    while True:
        _process_event(events.get())
        events.task_done()

if __name__ == "__main__":
    start()
