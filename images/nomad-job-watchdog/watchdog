#!/usr/bin/env python3

from warnings import filterwarnings
from urllib3.exceptions import InsecureRequestWarning
filterwarnings("ignore", category = InsecureRequestWarning)

from nomad import Nomad
from nomad.api.exceptions import URLNotFoundNomadException
from os import getenv
from queue import Queue
from threading import Thread, Event
from time import sleep
from typing import cast, Any

if not (secrets_dir := getenv("NOMAD_SECRETS_DIR", "")):
    raise ValueError("NOMAD_SECRETS_DIR environment variable is not set.")
if not (namespace := getenv("NOMAD_NAMESPACE", "")):
    raise ValueError("NOMAD_NAMESPACE environment variable is not set.")

PARAMS_META_PREFIX: str = getenv("DEFAULTS_META_PREFIX", "params")
VOLUMES_META_PREFIX: str = getenv("VOLUMES_META_PREFIX", "volumes")
PARAMS_VAR_ROOT_PATH: str = getenv("PARAMS_VAR_ROOT_PATH", "params")
NOMAD_SOCKET: str = f"{secrets_dir}/api.sock"
STATE_VAR_PATH: str = "system/tools/nomad-job-watchdog/state"

nomad: Nomad = Nomad()

def _get_var(path: str) -> tuple[int, dict[str, str]]:
    var: dict[str, Any] = nomad.variable.get_variable(path, namespace)
    return var["ModifyIndex"], var["Items"]

def _is_var(path: str) -> bool:
    try:
        _get_var(path)
        return True
    except URLNotFoundNomadException:
        return False

def _set_var(path: str, data: dict[str, str], index: int | None = None) -> tuple[int, dict[str, str]]:
    var: dict[str, Any] = nomad.variable.create_variable(path, {"Items": data}, namespace, index)
    return var["ModifyIndex"], var["Items"]

def _attach_acl(data: dict[str, Any]) -> None:
    rules: str = f"""\
    namespace "{data["namespace"]}" {{
        policy = "read"

        variables {{
            path "{PARAMS_VAR_ROOT_PATH}/{data['job']}/*" {{
                "capabilities" = [
                    "list",
                    "read"
                ]
            }}
        }}
    }}
    """
    policy: dict[str, Any] = {
        "Name": f"allow-variables-read-{data['job']}".replace("_", "-"),
        "Description": f"AutoACL: Allow read variables for {data['job']} job",
        "JobACL": {
            "Namespace": data["namespace"],
            "JobID": data['job']
        },
        "Rules": rules
    }
    print(f"Creating ACL policy for {data['job']} job")
    nomad.acl.create_policy(f"allow-variables-read-{data['job']}".replace("_", "-"), policy)

def _remove_acl(data: dict[str, Any]) -> None:
    print(f"Deleting ACL policy for {data['job']} job")
    nomad.acl.delete_policy(f"allow-variables-read-{data['job']}".replace("_", "-"))

def _create_params(data: dict[str, Any]) -> None:
    param_vars: dict[str, dict[str, str]] = {}
    for param_key, param_value in data["params"].items():
        variable_subpath, variable_key = param_key.split(".", 1)
        variable_path: str = f"{PARAMS_VAR_ROOT_PATH}/{data['job']}/{variable_subpath}"
        param_vars.setdefault(variable_path, {})[variable_key] = param_value
    for path, value in param_vars.items():
        print(f"Creating variable from params metadata for {data['job']} job @ {path}")
        current_value: dict[str, str] = {}
        index: int | None = None
        if _is_var(path):
            index, current_value = _get_var(path)
            value |= current_value
        _set_var(path, value, index)

# def _create_volumes(data: dict[str, Any]) -> None:
#     volume_config: dict[str, Any] = {
#         "type": "csi",
#         "capability": {
#             "access_mode": "multi-node-multi-writer",
#             "attachment_mode": "file-system"
#         }
#     }
#     volume_vars: dict[str, dict[str, str]] = {}
#     for volume_key, volume_value in data["volumes"].items():
#         volume_id, volume_subconfig = volume_key.split(".", 1)

#         # if volume_config.startswith("capability."):
#         #     volume_config, capability_subconfig =  volume_config.split(".", 1)

#     print(volume_config)

def _process_event(event: dict[str, Any]) -> None:
    state_var_index: int = 0
    last_event_value: int = 0
    if _is_var(STATE_VAR_PATH):
        state_var_index, state_value = _get_var(STATE_VAR_PATH)
        last_event_value = int(state_value["LAST_EVENT"])
    if event["Index"] <= last_event_value:
        return
    job: dict[str, Any] = event["Events"][0]["Payload"]["Job"]
    data: dict[str, Any] = {
        "namespace": job["Namespace"],
        "job": job["Name"],
        "params": {
            meta_key.removeprefix(f"{PARAMS_META_PREFIX}."): meta_value
            for meta_key, meta_value in job["Meta"].items()
            if meta_key.startswith(f"{PARAMS_META_PREFIX}.")
        },
        # "volumes": {
        #     meta_key.removeprefix(f"{VOLUMES_META_PREFIX}."): meta_value
        #     for meta_key, meta_value in job["Meta"].items()
        #     if meta_key.startswith(f"{VOLUMES_META_PREFIX}.")
        # }
    }
    if event["Events"][0]["Type"] == "JobRegistered":
        _attach_acl(data)
        _create_params(data)
        # _create_volumes(data)
    elif event["Events"][0]["Type"] == "JobDeregistered":
        _remove_acl(data)
    _set_var(
        STATE_VAR_PATH,
        {"LAST_EVENT": str(event["Index"])},
        state_var_index
    )

def start() -> None:
    stream, _, events = cast(
        tuple[Thread, Event, Queue],
        nomad.event.stream.get_stream(
            namespace = "*",
            topic = {"Job": "*"}
        )
    )
    stream.start()
    while True:
        event: dict[str, Any] = events.get()
        try:
            _process_event(event)
            events.task_done()
        except Exception as exception:
            print(
                f"While processing {event['Index']} ({event['Events'][0]['Key']} "
                f"-> {event['Events'][0]['Type']}) exception was thrown {exception}"
            )
            sleep(1)

if __name__ == "__main__":
    start()
