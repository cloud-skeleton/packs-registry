#!/usr/bin/env python3

from warnings import filterwarnings
from urllib3.exceptions import InsecureRequestWarning
filterwarnings("ignore", category = InsecureRequestWarning)

from copy import deepcopy
from dxf import DXF
from functools import cmp_to_key
from nomad import Nomad
from nomad.api.exceptions import URLNotFoundNomadException
from os import getenv
from queue import Queue
from semantic_version import Version
from threading import Thread, Event
from time import sleep
from typing import cast, Any

if not (NOMAD_SECRETS_DIR := getenv("NOMAD_SECRETS_DIR", "")):
    raise ValueError("NOMAD_SECRETS_DIR environment variable is not set.")
if not (NAMESPACE := getenv("NOMAD_NAMESPACE", "")):
    raise ValueError("NOMAD_NAMESPACE environment variable is not set.")

NOMAD_SOCKET: str = f"unix://{NOMAD_SECRETS_DIR}/api.sock"
IMAGES_VARIABLE_NAME: str = getenv("IMAGES_VARIABLE_NAME", "images")
PARAMS_VAR_ROOT_PATH: str = getenv("PARAMS_VAR_ROOT_PATH", "params")

nomad: Nomad = Nomad(address = NOMAD_SOCKET)
def _get_var(path: str, namespace: str = NAMESPACE) -> tuple[int, dict[str, str]]:
    var: dict[str, Any] = nomad.variable.get_variable(path, namespace)
    return var["ModifyIndex"], var["Items"]

def _list_vars(path_prefix: str, namespace: str = NAMESPACE) -> dict[str, str]:
    return {
        var['Path']: var['Namespace']
        for var in nomad.variables.get_variables(path_prefix, namespace)
    }

def _set_var(
    path: str,
    data: dict[str, str],
    index: int | None = None,
    namespace: str = NAMESPACE
) -> tuple[int, dict[str, str]]:
    var: dict[str, Any] = nomad.variable.create_variable(path, {"Items": data}, namespace, index)
    return var["ModifyIndex"], var["Items"]

def _get_newest_tag(original_tag: str, all_tags: list[str]) -> str:
    v_prefix: bool = original_tag.startswith("v")
    if v_prefix:
        original_tag: str = original_tag.removeprefix("v")
    print(Version(original_tag))
    # print([sorted(all_tags, key = cmp_to_key(compare), reverse = True)])
    return ""

def start() -> None:
    latest_tags: dict[str, str] = {}
    for variable, namespace in _list_vars(f"{PARAMS_VAR_ROOT_PATH}/", "*").items():
        if not variable.endswith(f"/{IMAGES_VARIABLE_NAME}"):
            continue
        index, images = _get_var(variable, namespace)
        for image, tag in images.items():
            host: str = "registry-1.docker.io"
            repository: str = f"library/{image}"
            first, separator, rest = image.partition("/")
            if separator and '.' in first:
                host = first
                repository = rest
            print(f"Found variable {variable}@{namespace} containing {host}/{repository}:{tag} image.")
            if f"{host}/{repository}" not in latest_tags:
                dxf: DXF = DXF(
                    host,
                    repository,
                    lambda dxf, response: dxf.authenticate(
                        response = response,
                        actions = ["pull"]
                    )
                )
                latest_tags[f"{host}/{repository}"] = _get_newest_tag(tag, dxf.list_aliases())
            latest_tag: str = latest_tags[f"{host}/{repository}"]
            print(f"Updating from {host}/{repository}:{tag} to {host}/{repository}:{latest_tag}!")
            images[image] = latest_tag
        # _set_var(variable, images, index, namespace)

if __name__ == "__main__":
    start()
