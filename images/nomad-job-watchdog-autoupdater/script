#!/usr/bin/env python3

from warnings import filterwarnings
from urllib3.exceptions import InsecureRequestWarning
filterwarnings("ignore", category = InsecureRequestWarning)

from dxf import DXF
from copy import deepcopy
from nomad import Nomad
from nomad.api.exceptions import URLNotFoundNomadException
from os import getenv
from queue import Queue
from threading import Thread, Event
from time import sleep
from typing import cast, Any

if not (NOMAD_SECRETS_DIR := getenv("NOMAD_SECRETS_DIR", "")):
    raise ValueError("NOMAD_SECRETS_DIR environment variable is not set.")
if not (NAMESPACE := getenv("NOMAD_NAMESPACE", "")):
    raise ValueError("NOMAD_NAMESPACE environment variable is not set.")

NOMAD_SOCKET: str = f"unix://{NOMAD_SECRETS_DIR}/api.sock"
IMAGES_VARIABLE_NAME: str = getenv("IMAGES_VARIABLE_NAME", "images")
PARAMS_VAR_ROOT_PATH: str = getenv("PARAMS_VAR_ROOT_PATH", "params")

nomad: Nomad = Nomad(address = NOMAD_SOCKET)
def _get_var(path: str, namespace: str = NAMESPACE) -> tuple[int, dict[str, str]]:
    var: dict[str, Any] = nomad.variable.get_variable(path, namespace)
    return var["ModifyIndex"], var["Items"]

def _list_vars(path_prefix: str, namespace: str = NAMESPACE) -> dict[str, str]:
    return {
        var['Path']: var['Namespace']
        for var in nomad.variables.get_variables(path_prefix, namespace)
    }

# def _is_var(path: str, namespace: str = NAMESPACE) -> bool:
#     try:
#         _get_var(path, namespace)
#         return True
#     except URLNotFoundNomadException:
#         return False

# def _set_var(
#     path: str,
#     data: dict[str, str],
#     index: int | None = None,
#     namespace: str = NAMESPACE
# ) -> tuple[int, dict[str, str]]:
#     var: dict[str, Any] = nomad.variable.create_variable(path, {"Items": data}, namespace, index)
#     return var["ModifyIndex"], var["Items"]

def start() -> None:
    latest_versions: dict[str, str] = {}
    for variable, namespace in _list_vars(f"{PARAMS_VAR_ROOT_PATH}/", "*").items():
        if not variable.endswith(f"/{IMAGES_VARIABLE_NAME}"):
            continue
        index, images = _get_var(variable, namespace)
        for image, tag in images.items():
            host: str = "registry.docker.io"
            repository: str = image
            first, separator, rest = image.partition("/")
            if separator and ('.' in first or ':' in first):
                host = first
                repository = rest
            print(f"Found variable {variable}@{namespace} containing {host}/{repository}:{tag} image.")
            if f"{host}/{repository}" not in latest_versions:
                for alias in DXF(host, repository, lambda dxf, resp: dxf.authenticate(response=resp, actions=["pull"])).list_aliases(iterate = True):
                    print(alias)
            # print(f"{variable} ~{index} @ {namespace} -> {images} -> {host}/{repository}:{tag}")

if __name__ == "__main__":
    start()
